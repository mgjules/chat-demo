package templates

import (
	"strconv"
	"time"

	"github.com/mgjules/chat-demo/chat"
	"github.com/mgjules/chat-demo/user"
)

templ Chat(user *user.User, room *chat.Room, cErr *chat.Error) {
	<script defer type="module">
    import Alpine from 'https://cdn.jsdelivr.net/npm/alpinejs@3.13.0/dist/module.esm.min.js'
		import 'https://unpkg.com/htmx.org@1.9.5'
		import 'https://unpkg.com/htmx.org@1.9.5/dist/ext/ws.js'
		import { register, render } from 'https://unpkg.com/timeago.js@4.0.2?module'

		window.Alpine = Alpine

		document.addEventListener('alpine:init', () => {
			Alpine.data('chat', () => ({
				init() {
					// The defaults locales are too verbose.
					register('mini-locale', (number, index, totalSec) => {
						return [
							['now', 'soon'],
							['%ss', 'in %ss'],
							['1m', 'in 1m'],
							['%sm', 'in %sm'],
							['1h', 'in 1h'],
							['%sh', 'in %sh'],
							['1d', 'in 1d'],
							['%sd', 'in %sd'],
							['1w', 'in 1w'],
							['%sw', 'in %sw'],
							['1mo', 'in 1mo'],
							['%smo', 'in %smo'],
							['1yr', 'in 1yr'],
							['%syr', 'in %syr']
						][index]
					})

					// Check if UnoCSS is loaded by watching the removal of the `un-cloak` attribute from the body.
					// It's a vanilla alternative to `jQuery.ready`.
					const observer = new MutationObserver((mutationList) => {
						mutationList.forEach((mutation) => {
							switch (mutation.type) {
								case 'attributes':
									switch (mutation.attributeName) {
										case 'un-cloak':
											this.scrollIntoView()
											this.focus()
											observer.disconnect()
									}
									break
							}
						})
					})
					observer.observe(document.body, {
						attributeFilter: ['un-cloak']
					})
				},
				scrollIntoView() {
					this.$nextTick(() => { this.$refs.anchor.scrollIntoView() })
					
				},
				focus() {
					this.$nextTick(() => { this.$refs.input.focus() })
				},
				timeago() {
					this.$nextTick(() => { render(this.$el, 'mini-locale', { minInterval: 10 }) })
				}
			}))
    })

		Alpine.start()
	</script>
	<div class="relative">
		@ChatGlobalError(cErr)
		<div hx-ext="ws" ws-connect="/chatroom" class="flex flex-col p-4 container mx-auto max-h-screen" x-data="chat">
			@ChatHeader(room.NumUsers(), user.Name)
			@ChatMessages(user, room.Messages())
			@ChatForm(cErr)
			@ChatFooter()
		</div>
	</div>
}

templ ChatGlobalError(cErr *chat.Error) {
	<div id="error" hx-swap-oob="true">
		if cErr != nil && cErr.IsGlobal() {
			<div class={ templ.SafeClass(ternary(cErr.IsError(), "text-red", "text-orange")),"absolute z-4 flex flex-col gap-4 justify-center items-center w-screen h-screen px-2 text-center backdrop-blur-lg bg-coolgray-800/70 uppercase" }>
				<div class={ templ.SafeClass(ternary(cErr.IsError(), "i-carbon:error", "i-carbon:warning-alt")), "text-4xl" }></div>
				{ cErr.Error() }
			</div>
		}
	</div>
}

templ ChatHeaderNumUsers(numUsers uint64) {
	<div id="online" class="text-xs text-coolgray-400" hx-swap-oob="true">{ strconv.Itoa(int(numUsers)) + " " + ternary(numUsers > 1, "users", "user") }</div>
}

templ ChatHeader(numUsers uint64, userName string) {
	<div class="flex-none flex justify-between items-center flex-wrap gap-4">
		<div>
			<div class="flex items-center gap-2 uppercase">
				<div class="i-carbon-chat z-2"></div>
				<div><span class="font-extralight">Chatroom </span>Demo</div>
			</div>
			@ChatHeaderNumUsers(numUsers)
		</div>
		<div class="text-lightblue-200 text-sm">{ userName }</div>
	</div>
}

templ ChatMessageWrapped(user *user.User, message *chat.Message) {
	<div hx-swap-oob="beforebegin:#messages>li:last-child">
		@ChatMessage(user, message)
	</div>
}

templ ChatMessage(user *user.User, message *chat.Message) {
	<li class={ templ.KV("flex justify-end", user.ID == message.User.ID), "overflow-anchor-none transition-all" }>
		<div class="w-fit flex flex-col px-3 py-2 mr-4 text-xs bg-coolgray-700 border-t-1 border-t-coolgray-500 border-t-opacity-50 shadow-sm bg-opacity-50 rounded-md">
			if user.ID != message.User.ID {
				<div class="font-semibold">{ message.User.Name }</div>
			}
			<div class={ templ.KV("mt-1", user.ID != message.User.ID), "flex flex-justify-between gap-2" }>
				<div class="flex-nowrap font-light break-words">{ message.Content }</div>
				<div class="timeago self-end shrink-0 mt-1 text-[0.65rem] line-height-[0.80rem] font-light text-coolgray-400" datetime={ message.Time.String() } x-init="timeago()"></div>
			</div>
		</div>
	</li>
}

templ ChatMessages(user *user.User, messages []*chat.Message) {
	<ul id="messages" class="flex-initial grow mt-4 space-y-2 overflow-y-scroll transition-all">
		for _, msg := range messages {
			@ChatMessage(user, msg)
		}
		<li class="overflow-anchor-auto h-0.5" x-ref="anchor" x-init="scrollIntoView()"></li>
	</ul>
}

templ ChatForm(cErr *chat.Error) {
	<form id="form" hx-swap-oob="true" class="flex-none mt-4 transition-all" ws-send>
		<div class="relative flex">
			<div class="absolute z-2 top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-2/3">
				if cErr != nil && !cErr.IsGlobal() {
					<div class={ ternary(cErr != nil && cErr.IsError(), "text-red", "text-orange"), "flex-none mt-2 text-xs uppercase text-center" }>{ cErr.Error() }</div>
				}
			</div>
			<input
				name="chat_message"
				type="text"
				placeholder={ ternary(cErr == nil, "Type here", "") }
				disabled?={ cErr != nil }
				maxlength="256"
				required
				x-ref="input"
				x-init="focus()"
				class={ templ.KV(ternary(cErr != nil && cErr.IsError(), "border-red", "border-orange"), cErr != nil && !cErr.IsGlobal()), templ.SafeClass("w-full px-3 py-2 text-sm bg-coolgray-700 bg-opacity-70 border-1 border-coolgray-600 outline-none ring-0 focus:ring-1 focus:ring-coolgray-600 transition-all disabled:opacity-40 disabled:cursor-not-allowed rounded-md") }
			/>
		</div>
	</form>
}

templ ChatFooter() {
	<div class="flex-none mt-4 text-xs text-center text-coolgray-400">Copyright (c) { time.Now().Format("2006") }. All rights reserved.</div>
}

func ternary(cond bool, str1, str2 string) string {
	if cond {
		return str1
	}

	return str2
}
