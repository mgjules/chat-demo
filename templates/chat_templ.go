// Code generated by templ@v0.2.334 DO NOT EDIT.

package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"strconv"
	"time"

	"github.com/mgjules/chat-demo/chat"
	"github.com/mgjules/chat-demo/user"
)

func Chat(user *user.User, room *chat.Room, cErr *chat.Error) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<script defer type=\"module\">")
		if err != nil {
			return err
		}
		var_2 := `
    import Alpine from 'https://cdn.jsdelivr.net/npm/alpinejs@3.13.0/dist/module.esm.min.js'
		import 'https://unpkg.com/htmx.org@1.9.5'
		import 'https://unpkg.com/htmx.org@1.9.5/dist/ext/ws.js'
		import { register, render } from 'https://unpkg.com/timeago.js@4.0.2?module'

		window.Alpine = Alpine

		document.addEventListener('alpine:init', () => {
			Alpine.data('chat', () => ({
				init() {
					// The defaults locales are too verbose.
					register('mini-locale', (number, index, totalSec) => {
						return [
							['now', 'soon'],
							['%ss', 'in %ss'],
							['1m', 'in 1m'],
							['%sm', 'in %sm'],
							['1h', 'in 1h'],
							['%sh', 'in %sh'],
							['1d', 'in 1d'],
							['%sd', 'in %sd'],
							['1w', 'in 1w'],
							['%sw', 'in %sw'],
							['1mo', 'in 1mo'],
							['%smo', 'in %smo'],
							['1yr', 'in 1yr'],
							['%syr', 'in %syr']
						][index]
					})

					// Check if UnoCSS is loaded by watching the removal of the ` + "`" + `un-cloak` + "`" + ` attribute from the body.
					// It's a vanilla alternative to ` + "`" + `jQuery.ready` + "`" + `.
					const observer = new MutationObserver((mutationList) => {
						mutationList.forEach((mutation) => {
							switch (mutation.type) {
								case 'attributes':
									switch (mutation.attributeName) {
										case 'un-cloak':
											this.scrollIntoView()
											this.focus()
											observer.disconnect()
									}
									break
							}
						})
					})
					observer.observe(document.body, {
						attributeFilter: ['un-cloak']
					})
				},
				scrollIntoView() {
					this.$nextTick(() => { this.$refs.anchor.scrollIntoView() })
					
				},
				focus() {
					this.$nextTick(() => { this.$refs.input.focus() })
				},
				timeago() {
					this.$nextTick(() => { render(this.$el, 'mini-locale', { minInterval: 10 }) })
				}
			}))
    })

		Alpine.start()
	`
		_, err = templBuffer.WriteString(var_2)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</script><div class=\"relative\">")
		if err != nil {
			return err
		}
		err = ChatGlobalError(cErr).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<div hx-ext=\"ws\" ws-connect=\"/chatroom\" class=\"flex flex-col p-4 container mx-auto max-h-screen\" x-data=\"chat\">")
		if err != nil {
			return err
		}
		err = ChatHeader(room.NumUsers(), user.Name).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = ChatMessages(user, room.Messages()).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = ChatForm(cErr).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = ChatFooter().Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func ChatGlobalError(cErr *chat.Error) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_3 := templ.GetChildren(ctx)
		if var_3 == nil {
			var_3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div id=\"error\" hx-swap-oob=\"true\">")
		if err != nil {
			return err
		}
		if cErr != nil && cErr.IsGlobal() {
			var var_4 = []any{templ.SafeClass(ternary(cErr.IsError(), "text-red", "text-orange")), "absolute z-4 flex flex-col gap-4 justify-center items-center w-screen h-screen px-2 text-center backdrop-blur-lg bg-coolgray-800/70 uppercase"}
			err = templ.RenderCSSItems(ctx, templBuffer, var_4...)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("<div class=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_4).String()))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			var var_5 = []any{templ.SafeClass(ternary(cErr.IsError(), "i-carbon:error", "i-carbon:warning-alt")), "text-4xl"}
			err = templ.RenderCSSItems(ctx, templBuffer, var_5...)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("<div class=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_5).String()))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\"></div>")
			if err != nil {
				return err
			}
			var var_6 string = cErr.Error()
			_, err = templBuffer.WriteString(templ.EscapeString(var_6))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func ChatHeaderNumUsers(numUsers uint64) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_7 := templ.GetChildren(ctx)
		if var_7 == nil {
			var_7 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div id=\"online\" class=\"text-xs text-coolgray-400\" hx-swap-oob=\"true\">")
		if err != nil {
			return err
		}
		var var_8 string = strconv.Itoa(int(numUsers)) + " " + ternary(numUsers > 1, "users", "user")
		_, err = templBuffer.WriteString(templ.EscapeString(var_8))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func ChatHeader(numUsers uint64, userName string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_9 := templ.GetChildren(ctx)
		if var_9 == nil {
			var_9 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"flex-none flex justify-between items-center flex-wrap gap-4\"><div><div class=\"flex items-center gap-2 uppercase\"><div class=\"i-carbon-chat z-2\"></div><div><span class=\"font-extralight\">")
		if err != nil {
			return err
		}
		var_10 := `Chatroom `
		_, err = templBuffer.WriteString(var_10)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</span>")
		if err != nil {
			return err
		}
		var_11 := `Demo`
		_, err = templBuffer.WriteString(var_11)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div></div>")
		if err != nil {
			return err
		}
		err = ChatHeaderNumUsers(numUsers).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div><div class=\"text-lightblue-200 text-sm\">")
		if err != nil {
			return err
		}
		var var_12 string = userName
		_, err = templBuffer.WriteString(templ.EscapeString(var_12))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div></div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func ChatMessageWrapped(user *user.User, message *chat.Message) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_13 := templ.GetChildren(ctx)
		if var_13 == nil {
			var_13 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div hx-swap-oob=\"beforebegin:#messages&gt;li:last-child\">")
		if err != nil {
			return err
		}
		err = ChatMessage(user, message).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func ChatMessage(user *user.User, message *chat.Message) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_14 := templ.GetChildren(ctx)
		if var_14 == nil {
			var_14 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var var_15 = []any{templ.KV("flex justify-end", user.ID == message.User.ID), "overflow-anchor-none transition-all"}
		err = templ.RenderCSSItems(ctx, templBuffer, var_15...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<li class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_15).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"><div class=\"w-fit flex flex-col px-3 py-2 mr-4 text-xs bg-coolgray-700 border-t-1 border-t-coolgray-500 border-t-opacity-50 shadow-sm bg-opacity-50 rounded-md\">")
		if err != nil {
			return err
		}
		if user.ID != message.User.ID {
			_, err = templBuffer.WriteString("<div class=\"font-semibold\">")
			if err != nil {
				return err
			}
			var var_16 string = message.User.Name
			_, err = templBuffer.WriteString(templ.EscapeString(var_16))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
		}
		var var_17 = []any{templ.KV("mt-1", user.ID != message.User.ID), "flex flex-justify-between gap-2"}
		err = templ.RenderCSSItems(ctx, templBuffer, var_17...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<div class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_17).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"><div class=\"flex-nowrap font-light break-words\">")
		if err != nil {
			return err
		}
		var var_18 string = message.Content
		_, err = templBuffer.WriteString(templ.EscapeString(var_18))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div><div class=\"timeago self-end shrink-0 mt-1 text-[0.65rem] line-height-[0.80rem] font-light text-coolgray-400\" datetime=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(message.Time.String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" x-init=\"timeago()\"></div></div></div></li>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func ChatMessages(user *user.User, messages []*chat.Message) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_19 := templ.GetChildren(ctx)
		if var_19 == nil {
			var_19 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<ul id=\"messages\" class=\"flex-initial grow mt-4 space-y-2 overflow-y-scroll transition-all\">")
		if err != nil {
			return err
		}
		for _, msg := range messages {
			err = ChatMessage(user, msg).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("<li class=\"overflow-anchor-auto h-0.5\" x-ref=\"anchor\" x-init=\"scrollIntoView()\"></li></ul>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func ChatForm(cErr *chat.Error) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_20 := templ.GetChildren(ctx)
		if var_20 == nil {
			var_20 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<form id=\"form\" hx-swap-oob=\"true\" class=\"flex-none mt-4 transition-all\" ws-send><div class=\"relative flex\"><div class=\"absolute z-2 top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-2/3\">")
		if err != nil {
			return err
		}
		if cErr != nil && !cErr.IsGlobal() {
			var var_21 = []any{ternary(cErr != nil && cErr.IsError(), "text-red", "text-orange"), "flex-none mt-2 text-xs uppercase text-center"}
			err = templ.RenderCSSItems(ctx, templBuffer, var_21...)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("<div class=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_21).String()))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			var var_22 string = cErr.Error()
			_, err = templBuffer.WriteString(templ.EscapeString(var_22))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</div>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		var var_23 = []any{templ.KV(ternary(cErr != nil && cErr.IsError(), "border-red", "border-orange"), cErr != nil && !cErr.IsGlobal()), templ.SafeClass("w-full px-3 py-2 text-sm bg-coolgray-700 bg-opacity-70 border-1 border-coolgray-600 outline-none ring-0 focus:ring-1 focus:ring-coolgray-600 transition-all disabled:opacity-40 disabled:cursor-not-allowed rounded-md")}
		err = templ.RenderCSSItems(ctx, templBuffer, var_23...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<input name=\"chat_message\" type=\"text\" placeholder=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(ternary(cErr == nil, "Type here", "")))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"")
		if err != nil {
			return err
		}
		if cErr != nil {
			_, err = templBuffer.WriteString(" disabled")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString(" maxlength=\"256\" required x-ref=\"input\" x-init=\"focus()\" class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_23).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"></div></form>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func ChatFooter() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_24 := templ.GetChildren(ctx)
		if var_24 == nil {
			var_24 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<div class=\"flex-none mt-4 text-xs text-center text-coolgray-400\">")
		if err != nil {
			return err
		}
		var_25 := `Copyright (c) `
		_, err = templBuffer.WriteString(var_25)
		if err != nil {
			return err
		}
		var var_26 string = time.Now().Format("2006")
		_, err = templBuffer.WriteString(templ.EscapeString(var_26))
		if err != nil {
			return err
		}
		var_27 := `. All rights reserved.`
		_, err = templBuffer.WriteString(var_27)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func ternary(cond bool, str1, str2 string) string {
	if cond {
		return str1
	}

	return str2
}
